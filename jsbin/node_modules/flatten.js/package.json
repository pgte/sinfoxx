{
  "author": {
    "name": "Aron Carroll",
    "email": "code@aroncarroll.com",
    "url": "http://aroncarroll.com/"
  },
  "name": "flatten.js",
  "description": "Inflate and deflate nested objects",
  "version": "0.1.0",
  "homepage": "https://github.com/aron/flatten.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/aron/flatten.js.git"
  },
  "main": "flatten.js",
  "readme": "flatten()\n=========\n\nFlattens a deeply nested object into a object containing only keys and\nvalues. Previously nested objects have the hierarchy represented as\na keypath in their property key.\n\nflatten(object [, delimiter])\n-----------------------------\n\n### Parameters\n\n    object    - A deeply nested Object to flatten.\n    delimiter - A delimiter to use in the keypaths (default: \".\")\n\n### Returns\n\nReturns the flattened object.\n\n### Examples\n\n```javascript\nvar data = {\n  track: {\n    name: 'Michelle',\n    url: 'http://www.last.fm/music/The+Beatles/Rubber+Soul/Michelle',\n    album: {\n      name: 'Rubber Soul'\n      url: 'http://www.last.fm/music/The+Beatles/Rubber+Soul'\n      tracks: 12\n    },\n    artist: {\n      name: 'The Beatles',\n      url: 'http://www.last.fm/music/The+Beatles'\n    }\n  }\n};\n\nflatten(data);\n// => returns {\n//   'track.name': 'Michelle',\n//   'track.url': 'http://www.last.fm/music/The+Beatles/Rubber+Soul/Michelle',\n//   'track.album.name': 'Rubber Soul'\n//   'track.album.url': 'http://www.last.fm/music/The+Beatles/Rubber+Soul'\n//   'track.album.tracks': 12\n//   'track.artist.name': 'The Beatles',\n//   'track.artist.url': 'http://www.last.fm/music/The+Beatles'\n// }\n```\n\nTo use with node.js:\n\n```javascript\nvar flatten = require('flatten').flatten;\nflatten(data);\n```\n\nexpand()\n========\n\nExpands a previously flattened object restoring keys with keypaths\ninto full objects. Also accepts an optional `delimiter` to manually\nspecify a keypath.\n\nexpand(object [, delimiter])\n----------------------------\n\n### Parameters\n\n    object    - A flattened Object to restore.\n    delimiter - A delimiter to use in the keypaths (default: \".\")\n\n### Returns\n\nReturns the newly expanded object.\n\n### Examples\n\n```javascript\nvar data = {\n  'track.name': 'Michelle',\n  'track.url': 'http://www.last.fm/music/The+Beatles/Rubber+Soul/Michelle',\n  'track.album.name': 'Rubber Soul'\n  'track.album.url': 'http://www.last.fm/music/The+Beatles/Rubber+Soul'\n  'track.album.tracks': 12\n  'track.artist.name': 'The Beatles',\n  'track.artist.url': 'http://www.last.fm/music/The+Beatles'\n};\n\nexpand(data);\n// => returns data object as seen in flatten example above.\n```\n\nTo use with node.js:\n\n```javascript\nvar expand = require('flatten').expand;\nexpand(data);\n```\n\n.noConflict()\n-------------\n\nBoth functions have a `.noConflict()` method that allows you to reassign\nthem to another variable in the same way as `jQuery.noConflict()`.\n\nTo assign the functions to another library (eg. Underscore):\n\n```javascript\n// Extend underscore.js\n_.mixin({\n  flattenObject: flatten.noConflict(),\n  expandObject:  expand.noConflict()\n});\n\n// Extend jQuery\n$.extend({\n  flatten: flatten.noConflict(),\n  expand:  expand.noConflict()\n});\n```\n\n### Licence\n\nReleased under the MIT license\n",
  "readmeFilename": "README.md",
  "_id": "flatten.js@0.1.0",
  "dist": {
    "shasum": "d2f0e717d72982b4962b9cdb31a2682f1bd6b145"
  },
  "_from": "flatten.js@0.1.0",
  "_resolved": "https://registry.npmjs.org/flatten.js/-/flatten.js-0.1.0.tgz"
}
