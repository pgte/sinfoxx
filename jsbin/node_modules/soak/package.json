{
  "name": "soak",
  "description": "Simple functions for extending JavaScript objects",
  "version": "0.3.0",
  "keywords": [
    "inheritance",
    "inherits",
    "extend"
  ],
  "homepage": "http://github.com/aron/soak.js",
  "main": "soak.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/aron/soak.js.git"
  },
  "author": {
    "name": "Aron Carroll",
    "email": "code@aroncarroll.com",
    "url": "http://aroncarroll.com/"
  },
  "readme": "Soak.js\n=======\n\nProvides simple methods for working with inheritance and objects. This\nlibrary is heavily influenced by the simplistic prototypal inheritance\nprovided in both [CoffeeScript][] and [Backbone][] and simply exists so that\nit can be included in other libraries.\n\n[CoffeeScript]: http://jashkenas.github.com/coffee-script/\n[Backbone]: http://documentcloud.github.com/backbone/\n\ninherit(Parent, instance, object)\n------------------------------------\n\nCreates a new constructor function that inherits from a parent constructor.\nInstance and static methods can also be provided as additional arguments, if the\n`methods` argument has a property called __constructor__ this will be\nused as the constructor function.\n\n### Arguments\n\n - `parent`: A constructor Function to inherit from.\n - `instance`: An Object literal of instance methods that are added to the\n    constructors prototype (optional).\n - `object`: An Object literal of static/class methods to add to the\n    constructor itself (optional).\n\n### Examples\n\n```javascript\n// Original function to inherit from.\nfunction MyObject() {};\n\nvar SubClass = inherit(MyObject, {\n  instanceMethod: function () {}\n}, {\n  staticProp: 'some-string',\n  staticMethod: function () {}\n});\n\nvar instance = new SubClass();\ninstance instanceof MyObject   //=> true\ntypeof instance.instanceMethod //=> \"function\"\ntypeof SubClass.staticMethod   //=> \"function\"\n```\n\nCalling parent methods is the same as pure prototypal inheritance, just call the\nparent method using `.call()` or `.apply()` passing in `this` as the first argument\nto set the appropriate context.\n\n```javascript\n// Original function to inherit from.\nfunction MyObject() {};\nMyObject.prototype.say = function () { return 'Hello'; }\n\nvar SubClass = inherit(MyObject, {\n  constructor: function SubClass() {\n   // Call the parent constructor.\n    MyObject.apply(this, arguments);\n\n    // Set up other properties.\n  },\n  say: function () {\n    // Call the parent method providing `this` to set the context.\n    return MyObject.prototype.say.apply(this, arguments) + ' World';\n  }\n});\n\n(new SubClass()).say(); //=> 'Hello World'\n```\n\nmixin(target [ , arguments... ])\n--------------------------------\n\nExtends an object with the properties on successive arguments. Returns the\nfirst argument. Properties will be copied from right to left with the right\noverriding the left.\n\n### Arguments\n\n - `target`: The object that is to be extended.\n - `arguments*`: Properties from all successive arguments will be copied to the target.\n\n### Examples\n\n```javascript\nmixin({type: 'person'}, {name: 'bill', age: 20}, {age: 21});\n//=> {type: 'person', name: 'bill', age: 21}\n```\n\ncreate(parent)\n--------------\n\nCreates a new object instance and sets it's internal prototype to the parent\nargument provided. This is based on [Crockford's Object.create()][#create] but\nwill use the native `Object.create()` if present. Unlike Object.create() this\nfunction will always return a new object even if a non object is provided as an\nargument.\n\n[#create]: http://javascript.crockford.com/prototypal.html\n\n### Arguments\n\n - `parent`: An object to use for the new objects internal prototype.\n\n### Examples\n\n```javascript\nvar appleObject = {color: 'green'}\nvar appleInstance = create(appleObject);\n\nappleInstance.hasOwnProperty('color'); //=> false\nappleInstance.color === appleObject.color; //=> true\n```\n\nUse in Non Browser Environments\n-------------------------------\n\nUsage with Node:\n\n```javascript\nvar inherit  = require('soak').inherit;\nvar mixin    = require('soak').mixin;\nvar MyObject = require('./lib/my-object');\n\nmodule.exports = inherit(MyObject, {\n  instanceMethod: function () {}\n}, {\n  staticProp: 'some-string',\n  staticMethod: function () {}\n});\n```\n\nUsage with AMD compatible script loader:\n\n```javascript\ndefine(['soak', './lib/my-object'], function (soak, MyObject) {\n  return soak.inherit(MyObject, {\n    instanceMethod: function () {}\n  }, {\n    staticProp: 'some-string',\n    staticMethod: function () {}\n  });\n});\n```\n\nDevelopment\n-----------\n\nTests require [Node][] and [Vows][] to run. To install Vows\nusing [npm][] run:\n\n    $ npm install vows\n\nThen to run the tests simply enter:\n\n    $ vows soak-test.js\n\n[Node]: http://nodejs.org/\n[Vows]: http://vowsjs.org/\n[npm]:  http://npmjs.org/\n\nLicense\n-------\n\nReleased under the MIT license\n",
  "readmeFilename": "README.md",
  "_id": "soak@0.3.0",
  "dist": {
    "shasum": "582f8c869ceeebab393fc4ed54a5fd70416dff92"
  },
  "_from": "soak@0.3.0",
  "_resolved": "https://registry.npmjs.org/soak/-/soak-0.3.0.tgz"
}
